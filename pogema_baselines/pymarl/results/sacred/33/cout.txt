[INFO 09:31:33] pymarl Running command 'my_main'
[INFO 09:31:33] pymarl Started run with ID "33"
[DEBUG 09:31:33] pymarl Starting Heartbeat
[DEBUG 09:31:33] my_main Started
[INFO 09:31:33] my_main Experiment Parameters:
[INFO 09:31:33] my_main 

{   'action_selector': 'epsilon_greedy',
    'agent': 'dqn',
    'agent_output_type': 'q',
    'batch_size': 32,
    'batch_size_run': 1,
    'buffer_cpu_only': True,
    'buffer_size': 5000,
    'checkpoint_path': '',
    'critic_lr': 0.0005,
    'double_q': True,
    'env': 'pogema',
    'env_args': {   'grid_config': {   'FREE': 0,
                                       'MOVES': [   [   0,
                                                        0],
                                                    [   -1,
                                                        0],
                                                    [   1,
                                                        0],
                                                    [   0,
                                                        -1],
                                                    [   0,
                                                        1]],
                                       'OBSTACLE': 1,
                                       'agents_xy': None,
                                       'auto_reset': None,
                                       'collision_system': 'priority',
                                       'density': 0.2,
                                       'empty_outside': True,
                                       'integration': None,
                                       'map': None,
                                       'map_name': 'OneCriminal',
                                       'max_episode_steps': 256,
                                       'num_agents': 3,
                                       'num_criminal': 1,
                                       'obs_radius': 5,
                                       'observation_type': 'POMAPF',
                                       'on_target': 'finish',
                                       'persistent': False,
                                       'seed': None,
                                       'size': 16,
                                       'targets_xy': None},
                    'seed': 517130719},
    'epsilon_anneal_time': 50000,
    'epsilon_finish': 0.05,
    'epsilon_start': 1.0,
    'evaluate': False,
    'fixed': 0,
    'gamma': 0.99,
    'grad_norm_clip': 10.0,
    'hidden_dim1': 128,
    'hidden_dim2': 64,
    'label': 'default_label',
    'learner': 'q_learner',
    'learner_log_interval': 2000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 2000,
    'lr': 0.0005,
    'mac': 'basic_mac',
    'mixer': None,
    'name': 'iql',
    'obs_agent_id': True,
    'obs_last_action': True,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'project_name': 'Pogema-test-PyMARL',
    'repeat_id': 1,
    'rnn_hidden_dim': 64,
    'runner': 'episode',
    'runner_log_interval': 2000,
    'save_model': True,
    'save_model_interval': 10000000,
    'save_replay': False,
    'seed': 517130719,
    't_max': 10000,
    'target_update_interval': 200,
    'test_greedy': True,
    'test_interval': 2000,
    'test_nepisode': 1,
    'use_cuda': True,
    'use_tensorboard': True,
    'use_wandb': False}

[INFO 09:31:39] my_main Beginning training for 10000 timesteps
/home/maddpg/pogema_env/pogema-baselines/pymarl/components/episode_buffer.py:103: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1659484657607/work/torch/csrc/utils/tensor_new.cpp:204.)
  v = th.tensor(v, dtype=dtype, device=self.device)
/home/maddpg/pogema_env/pogema-baselines/pymarl/components/episode_buffer.py:103: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
[INFO 09:31:39] my_main t_env: 24 / 10000
[INFO 09:31:39] my_main Estimated time left: 2 seconds. Time passed: 0 seconds
[INFO 09:31:40] my_main Saving models to results/models/iql__2023-10-12_09-31-33/24
